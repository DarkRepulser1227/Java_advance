面向对象:
1.类,对象,属性,方法,封装,继承和多态

2.构造方法:1)方法名称必须和类名一样,2)不能有返回值
在实例化对象的同时,为对象的属性赋初值

3.this代词
指代当前对象

4.访问权限修饰符
private:私有的:本类可用
defualt:包权限:本包可用
protected:受保护的:本包和子类
public:公有的:任意位置

习惯:属性声明成private的,方法声明成public
5. get和set方法组(public):通过该方法,在类外获取或者设置属性的值

6.to'String方法:在调试时,查看对象的类和属性的信息
  如果实体类没有toString方法,输出语句输出散列码,如果有,输出的toString的返回值
7.类方法和类属性:static

8.方法的重载
方法名相同,但是参数列表不同(参数类型不同或者个数不同)

9.类之间的关系
1)依赖关系
人看书,一个对象可以作为另一个对象的方法的参数
2)聚合关系
一个对象可以作为另一个对象的属性
3)继承关系
XX是XX的一种
extends,java是单继承


继承
1.子类会继承父类所有的非私有的属性和方法
2.父类中定义了非空的构造方法,子类也必须有非空的构造方法
3.当子类对父类的方法不满意的时候,可以重写父类的方法,子类方法把父类方法覆盖了
格式:方法名和参数列表完全相同
4.super关键字:调用父类方法,护着访问父类属性,只能在子类中使用

--练习
银行系统
User类:属性:编号,姓名,性别,余额(开户时都是0).方法:存钱,取钱,转账(5000以内),查询
VipUser:增加积分(每存入10元,算一个积分)属性,
增加积分兑换的方法,而且转账(20000)

抽象类和接口
1.出现在继承
2.抽象类:含有抽象方法的类.抽象方法是只定义不实现.关键字abstract.
抽象是不完整的类,不能直接实例化对象
1)子类可以选择实现所有父类的抽象方法,子类就是正常的类
2)子类可以不完全实现父类所有抽象方法,子类还是抽象类
Java提供的类,如果是抽象的,1)java定义的静态的实现方法,
2)Java提供该抽象类的子类
3)自定义类继承该类

接口
1.interface
1)变相的实现多继承,java允许在继承一个类的同时,实现多个接口
2)接口的所有的方法都是抽象的,所有的属性,都是public static final的
  接口是常量和抽象方法的集合
3)标准化的作用
  
final:终态
1)final声明的变量不能被修改的-->常量
2)final声明的方法不能被重写的
3)final声明的类不能被继承的

对象的转型
1.一定是在继承中发生的
1)上转型:父类声明,子类实现
People p = new People();
People p = new Student();
父类是不能使用子类特有的属性和方法的,但是可以访问子类重写的父类的方法
2)强制类型转换
Stu s2 = (Stu)(new EnglishPeople());
2.instancof:判断该对象是否为其他类或者子类对象

常用类
1. 包装类:四类八种都有相应的包装类
int a = 1;
Integer
Double
Long
Character
2.Math类
3. 时间相关,Date,Calender,SimpleDateFormat

***********
集合
1.集合和数组的区别
1)集合只能放对象类型,数组可以放任意数据类型
2)数组是固定长度的,而集合长度可变的
collection<E>-->List<E>
		  -->Set<E>
Map<K,V>

2.List-->ArrayList:查询效率高,添加删除效率低,因为是连续的存储空间
	  -->LinkedList:添加删除效率高,查询效率低,不了连续,链表的	
	  List list = new ArrayList();
3.MVC
M:Model
v:View
c:Controller	  
	  
List:可以有重复值 get set
Set:不允许有重复值,有序的,重写equals方法和hashcode方法
Map<K,V>:Map不允许重复key值,如果多次加入同样的key,后面会替换前面
Student stu = new Student();
Map<String,Object> map = new HashMap<>();
map.put("name","zhangsan");
map.put("gender","male");
map.put("age","18);

******************
异常:运行时
强制性上分类:1)强制要求必须处理,方法的定义时,声明了throws.
2)不强制要求的
分类1)系统异常 2)用户自定义的
处理异常
1)try-catch-finally(总是执行)
2)throw

********************
Input/Output Stream
1. File : 文件,既可以描述一个文件夹(路径)也可以描述一个文件
   File  path = new File("c:/test/");
   File file = new File(path,"abc.txt");

2. 选择合适的流
流的分类
   1)方向分:输入输出,输出流默认是写覆盖的形式
   2)内容:字节流(Stream)和字符流(reader,writer)
   3)级别:基础流和包装流
3. 使用流 读写数据
4. 关闭流

过度流(转换流)
InputStreamReader
OutputStreamWriter

对象流
1. 要读和写的对象要实现Serializable(序列化接口)
2. 在追加时,因为头信息的写入问题,要重写输出流,并重写writeStreamHeader方法
3. 在读取对象时,要人为通过异常处理文件结束












	  
	  
	  
	  
	  
	  
	  






 
 

